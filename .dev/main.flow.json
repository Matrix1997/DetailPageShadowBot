{
  "name": "main",
  "memo": "我的自动化应用",
  "kind": "visual",
  "blocks": [
    {
      "id": "9ab72b6d-ad59-41b9-afa3-369df1e4d1d8",
      "name": "programing.snippet",
      "isEnabled": true,
      "inputs": {
        "snippet": {
          "value": "10:# 导入xbot和xbot_visual模块，用于机器人的视觉功能和对话框展示\r\nimport xbot\r\nimport xbot_visual\r\n# 从当前目录导入package模块\r\nfrom . import package\r\n# 从package模块导入variables并命名为glv\r\nfrom .package import variables as glv\r\n# 导入time模块，用于控制时间相关的功能\r\nimport time\r\n\r\n# main函数定义，它接受一个列表参数args\r\ndef main(args):\r\n    # 尝试执行下面的代码块\r\n    try:\r\n        # 弹出选择对话框，让用户选择操作\r\n        select_dialog = xbot_visual.dialog.show_select_dialog(\r\n            title=None,  # 对话框标题\r\n            label=None,  # 对话框标签\r\n            select_type=\"list\",  # 选择类型为列表\r\n            select_model=\"single\",  # 选择模式为单选\r\n            values=lambda: [\"爬取商品详情页图片\", \"OCR识别\"],  # 提供给用户的选项\r\n            is_selected_first=True,  # 默认选中第一个\r\n            storage_key=\"498910e4-268c-4b57-a1fe-065daf8f9be8\",  # 存储键值\r\n            _block=(\"main\", 1, \"打开选择对话框\")  # 日志记录块信息\r\n        )\r\n        # 如果用户选择了\"爬取商品详情页图片\"并且有按下按钮\r\n        if xbot_visual.workflow.multiconditional_judgment(\r\n            relation=\"and\",  # 逻辑关系为\"与\"\r\n            conditionals=[  # 条件数组\r\n                {\"operand1\": select_dialog.values, \"operand2\": lambda: \"爬取商品详情页图片\", \"operator\": \"==\"},\r\n                {\"operand1\": select_dialog.pressed_button, \"operand2\": lambda: None, \"operator\": \"!=\"}\r\n            ],\r\n            _block=(\"main\", 2, \"IF 多条件\")  # 日志记录块信息\r\n        ):\r\n            # 打印日志，表示正在进行OCR识别\r\n            xbot_visual.programing.log(type=\"info\", text=lambda: \"正在进行OCR识别\", _block=(\"main\", 3, \"打印日志\"))\r\n            # 打印出用户按下的按钮\r\n            xbot_visual.programing.log(type=\"info\", text=select_dialog.pressed_button, _block=(\"main\", 4, \"打印日志\"))\r\n        # 如果用户选择了\"OCR识别\"并且有按下按钮\r\n        elif xbot_visual.workflow.multiconditional_judgment(\r\n            relation=\"and\",  # 逻辑关系为\"与\"\r\n            conditionals=[  # 条件数组\r\n                {\"operand1\": select_dialog.values, \"operand2\": lambda: \"OCR识别\", \"operator\": \"==\"},\r\n                {\"operand1\": select_dialog.values, \"operand2\": lambda: None, \"operator\": \"!=\"}\r\n            ],\r\n            _block=(\"main\", 5, \"Else IF 多条件\")  # 日志记录块信息\r\n        ):\r\n            # 弹出选择文件夹对话框\r\n            select_folder_dialog = xbot_visual.dialog.show_select_folder_dialog(\r\n                title=\"\\\"请选择商品ID所对应的文件夹\\\"\",  # 对话框标题\r\n                folder=\"\",  # 默认文件夹为空\r\n                _block=(\"main\", 6, \"打开选择文件夹对话框\")  # 日志记录块信息\r\n            )\r\n            # 打印选择的文件夹路径\r\n            xbot_visual.programing.log(type=\"info\", text=select_folder_dialog.folder, _block=(\"main\", 7, \"打印日志\"))\r\n            # 弹出选择文件对话框\r\n            select_file_dialog = xbot_visual.dialog.show_select_file_dialog(\r\n                title=lambda: \"请选择需要进行OCR的图片\",  # 对话框标题\r\n                folder=\"\",  # 默认文件夹为空\r\n                filter=\"所有文件|*.*\",  # 文件过滤器设置为所有文件\r\n                is_multi=True,  # 允许多选\r\n                is_checked_exists=True,  # 检查文件是否存在\r\n                _block=(\"main\", 8, \"打开选择文件对话框\")  # 日志记录块信息\r\n            )\r\n            # 获取选择的文件路径列表\r\n            select_file_path_list = select_file_dialog.file\r\n           ```python\r\n            # 打印ai_engine的字典属性（此行代码存在问题，因为ai_engine未在前文定义，可能是需要先定义ai_engine）\r\n            xbot_visual.programing.log(type=\"info\", text=lambda: ai_engine.__dict__, _block=(\"main\", 10, \"打印日志\"))\r\n            # 此处代码省略了循环体内的实现，可能是进行OCR识别的流程\r\n            # workflow.forin\r\n            # programing.log\r\n            #endloop\r\n        #endif\r\n        # 导入操作系统接口模块\r\n        import os\r\n        # 导入sys模块，用于访问与Python解释器密切相关的变量和函数\r\n        import sys\r\n        \r\n        # 从typing模块导入List，用于类型注解\r\n        from typing import List\r\n        \r\n        # 导入阿里云OCR API客户端\r\n        from alibabacloud_ocr_api20210707.client import Client as ocr_api20210707Client\r\n        # 导入阿里云OpenAPI模型\r\n        from alibabacloud_tea_openapi import models as open_api_models\r\n        # 导入阿里云Darabonba流客户端\r\n        from alibabacloud_darabonba_stream.client import Client as StreamClient\r\n        # 导入阿里云OCR API模型\r\n        from alibabacloud_ocr_api20210707 import models as ocr_api_20210707_models\r\n        # 导入阿里云工具模型\r\n        from alibabacloud_tea_util import models as util_models\r\n        # 导入阿里云工具客户端\r\n        from alibabacloud_tea_util.client import Client as UtilClient\r\n        \r\n        # 定义Sample类\r\n        class Sample:\r\n            # 初始化函数\r\n            def __init__(self):\r\n                pass\r\n        \r\n            # 静态方法，创建阿里云OCR API客户端\r\n            @staticmethod\r\n            def create_client(\r\n                    access_key_id: str,  # 阿里云账号AccessKey ID\r\n                    access_key_secret: str,  # 阿里云账号AccessKey Secret\r\n            ) -> ocr_api20210707Client:\r\n                \"\"\"\r\n                使用AK&SK初始化账号Client\r\n                @param access_key_id: 阿里云账号AccessKey ID\r\n                @param access_key_secret: 阿里云账号AccessKey Secret\r\n                @return: Client\r\n                @throws Exception\r\n                \"\"\"\r\n                # 创建配置对象\r\n                config = open_api_models.Config(\r\n                    access_key_id=access_key_id,  # 设置AccessKey ID\r\n                    access_key_secret=access_key_secret  # 设置AccessKey Secret\r\n                )\r\n                # Endpoint 请参考 https://api.aliyun.com/product/ocr-api\r\n                config.endpoint = f'ocr-api.cn-hangzhou.aliyuncs.com'  # 设置服务端点\r\n                # 返回OCR API客户端实例\r\n                return ocr_api20210707Client(config)\r\n        \r\n            # 静态方法，定义main函数\r\n            @staticmethod\r\n            def main(\r\n                    args: List[str],  # 命令行参数列表\r\n            ) -> None:\r\n                \"\"\"\r\n                主函数，执行OCR识别流程\r\n                @param args: 命令行参数列表\r\n                \"\"\"\r\n                # 创建OCR API客户端实例，使用环境变量中的AccessKey\r\n                client = Sample.create_client(os.environ['ALIBABA_CLOUD_ACCESS_KEY_ID'], os.environ['ALIBABA_CLOUD_ACCESS_KEY_SECRET'])\r\n                # 读取文件为流\r\n                body_stream = StreamClient.read_from_file_path(r'D:\\Desktop\\商品详情图片爬取\\抖音店铺\\3430145912763193664\\jjtwbnYD_m_5889cbf6055c5fa543d0d16b396886fb_sx_362601_www790-1268_tplv-5mmsx3fupr-resize_790_1268.jpeg')\r\n                # 创建OCR识别请求对象\r\n                recognize_all_text_request = ocr_api_20210707_models.RecognizeAllTextRequest(\r\n                    body=body_stream,  # 传入图片流\r\n                    type='Commerce'  # 设置识别类型为商业\r\n                )\r\n                # 创建运行时选项对象\r\n                runtime = util_models.RuntimeOptions()\r\n                # 尝试执行OCR识别请求\r\n                try:\r\n# 发起识别请求并获取响应\r\n                    resp = client.recognize_all_text_with_options(recognize_all_text_request, runtime)\r\n                    # 将响应转换为JSON字符串返回\r\n                    return UtilClient.to_jsonstring(resp)\r\n                except Exception as error:\r\n                    # 如果发生异常，打印错误信息和诊断地址\r\n                    print(error.message)\r\n                    print(error.data.get(\"Recommend\"))\r\n                    # 断言错误信息为字符串形式\r\n                    UtilClient.assert_as_string(error.message)\r\n        \r\n        # 调用Sample类的main方法，并传入命令行参数\r\n        object_test = Sample.main(sys.argv[1:])\r\n        # 打印OCR识别的结果\r\n        xbot_visual.programing.log(type=\"info\", text=lambda: object_test, _block=(\"main\", 16, \"打印日志\"))\r\n        # 导入SQLAlchemy的创建引擎模块\r\n        from sqlalchemy import create_engine, text\r\n        # 导入pandas模块，用于数据处理\r\n        import pandas as pd\r\n        \r\n        # 创建数据库连接\r\n        engine = create_engine(f'mysql+pymysql://[用户名]:[密码]@域名/数据库名')\r\n        \r\n        # 使用SQLAlchemy执行查询\r\n        with engine.connect() as connection:\r\n            # 执行查询并获取结果\r\n            result = connection.execute(text(\"SELECT * FROM feedback\"))\r\n            # 将查询结果转换为DataFrame\r\n            df = pd.DataFrame(result.fetchall(), columns=result.keys())\r\n        \r\n        # 读取文件内容\r\n        file_content = xbot_visual.file.read(\r\n            path=\"D:\\\\Desktop\\\\cookies_shadowbot.json\",  # 文件路径\r\n            read_way=\"all_text\",  # 读取方式为全文本\r\n            encoding=\"UTF-8\",  # 编码方式为UTF-8\r\n            _block=(\"main\", 2, \"读取文件\")  # 日志记录块信息\r\n        )\r\n        \r\n        # 再次使用SQLAlchemy执行查询\r\n        with engine.connect() as connection:\r\n            # 编写SQL查询语句\r\n            select_statement = text(\"SELECT cookies FROM douyin_shop_cookies WHERE id = 1\")\r\n            # 执行查询\r\n            result = connection.execute(select_statement)\r\n            # 读取单条查询结果\r\n            file_content_select = result.fetchone()[0]\r\n        \r\n        # 比较两个文件内容是否相等\r\n        is_equal = (file_content_select == file_content)\r\n        \r\n        # 打印比较结果\r\n        xbot_visual.programing.log(type=\"info\", text=lambda: is_equal, _block=(\"main\", 4, \"打印日志\"))\r\n        \r\n        # 弹出输入对话框，提示用户输入抖音店铺的商品ID\r\n        input_dialog = xbot_visual.dialog.show_input_dialog(\r\n            title=\"请输入抖店的商品ID\",  # 对话框标题\r\n            label=None,  # 标签为空\r\n            type=\"multiInput\",  # 输入类型为多行输入\r\n            value=None,  # 默认值为空\r\n            storage_key=\"17801cbf-9ba9-4b3c-86e8-de7a24641e2f\",  # 存储键值\r\n            _block=(\"main\", 1, \"打开输入对话框\")  # 日志记录块信息\r\n        )\r\n# 使用正则表达式分割用户输入的商品ID字符串\r\n        splited_list = re.split(r'\\r\\n|\\r|\\n', input_dialog.value)\r\n        \r\n        # 创建web browser对象，打开指定的网页\r\n        web_page = xbot_visual.web.create(\r\n            web_type=\"cef\",  # 使用cef浏览器\r\n            value=\"https://haohuo.jinritemai.com/ecommerce/trade/detail/index.html?id=3520886783468519177&origin_type=pc_compass_manage\",  # 商品详情页URL\r\n            silent_running=False,  # 非静默运行\r\n            wait_load_completed=True,  # 等待页面加载完成\r\n            load_timeout=\"20\",  # 加载超时设为20秒\r\n            stop_load_if_load_timeout=\"handleExcept\",  # 加载超时处理方式\r\n            chrome_file_name=None,  # Chrome浏览器文件名\r\n            edge_file_name=None,  # Edge浏览器文件名\r\n            ie_file_name=None,  # IE浏览器文件名\r\n            bro360_file_name=None,  # 360浏览器文件名\r\n            firefox_file_name=None,  # Firefox浏览器文件名\r\n            arguments=None,  # 浏览器启动参数\r\n            _block=(\"main\", 3, \"打开网页\")  # 日志记录块信息\r\n        )\r\n        \r\n        # 使用Cookie登录\r\n        xbot_visual.process.run(\r\n            process=\"xbot_extensions.cookie_login.process2\",  # 指定要运行的流程\r\n            package=__name__,  # 当前包名\r\n            inputs={  # 输入参数\r\n                \"网页对象\": web_page,\r\n                \"Cookie文件路径\": \"D:\\\\Desktop\\\\cookies_shadowbot.json\",\r\n                \"添加本地存储\": False,\r\n            },\r\n            outputs=[  # 输出参数列表\r\n            ],\r\n            _block=(\"main\", 4, \"Cookie登录\")  # 日志记录块信息\r\n        )\r\n        \r\n        # 获取桌面目录路径\r\n        dir_path = xbot_visual.dir.get_special_dir(\r\n            special_dir_name=\"DesktopDirectory\",  # 指定系统特殊文件夹名\r\n            _block=(\"main\", 5, \"获取系统文件夹路径\")  # 日志记录块信息\r\n        )\r\n        \r\n        # 创建“商品详情图片爬取”文件夹\r\n        spxq_folder = xbot_visual.dir.makedir(\r\n            parent=dir_path,  # 父目录路径\r\n            name=\"商品详情图片爬取\",  # 文件夹名称\r\n            _block=(\"main\", 6, \"创建文件夹\")  # 日志记录块信息\r\n        )\r\n        \r\n        # 在“商品详情图片爬取”文件夹下创建“抖音店铺”文件夹\r\n        dydp_folder = xbot_visual.dir.makedir(\r\n            parent=spxq_folder,  # 父目录路径\r\n            name=\"抖音店铺\",  # 文件夹名称\r\n            _block=(\"main\", 7, \"创建文件夹\")  # 日志记录块信息\r\n        )\r\n        \r\n        # 等待随机时间，模拟用户操作，避免操作过快被检测为机器人\r\n        xbot_visual.programing.sleep(\r\n            random_number=False,  # 是否使用随机数\r\n            seconds=\"3\",  # 等待秒数\r\n            start_number=\"1\",  # 随机数开始范围（不使用）\r\n            stop_number=\"5\",  # 随机数结束范围（不使用）\r\n            _block=(\"main\", 8, \"等待\")  # 日志记录块信息\r\n        )\r\n        \r\n        # 循环处理用户输入的每一个商品ID\r\n        for id_index, id_item in enumerate(xbot_visual.workflow.list_iterator(\r\n            list=lambda: splited_list,  # 用户输入的商品ID列表\r\n            loop_start_index=\"0\",  # 循环起始索引\r\n            loop_end_index=\"-1\",  # 循环结束索引\r\n            output_with_index=True,  # 输出循环索引\r\n            _block=(\"main\", 9, \"ForEach列表循环\") \r\n# 日志记录块信息\r\n        )): \r\n            # 为每个商品ID创建对应的文件夹\r\n            temp_id_folder = xbot_visual.dir.makedir(\r\n                parent=dydp_folder,  # 父目录为之前创建的“抖音店铺”文件夹\r\n                name=id_item,  # 文件夹名称为商品ID\r\n                _block=(\"main\", 10, \"创建文件夹\")  # 日志记录块信息\r\n            )\r\n            # 打印当前循环的索引\r\n            xbot_visual.programing.log(\r\n                type=\"info\", \r\n                text=id_index, \r\n                _block=(\"main\", 11, \"打印日志\")\r\n            )\r\n            # 构建商品详情页的URL\r\n            curr_url = f\"https://haohuo.jinritemai.com/ecommerce/trade/detail/index.html?id={id_item}&origin_type=pc_compass_manage\"\r\n            # 使用浏览器自动化打开商品详情页\r\n            web_page = xbot_visual.web.create(\r\n                web_type=\"cef\",  # 使用cef浏览器\r\n                value=lambda: curr_url,  # 浏览器打开的URL\r\n                silent_running=False, \r\n                wait_load_completed=True, \r\n                load_timeout=\"20\", \r\n                stop_load_if_load_timeout=\"handleExcept\", \r\n                chrome_file_name=None, \r\n                edge_file_name=None, \r\n                ie_file_name=None, \r\n                bro360_file_name=None, \r\n                firefox_file_name=None, \r\n                arguments=None, \r\n                _block=(\"main\", 13, \"打开网页\")\r\n            )\r\n            # 获取网页中的元素对象，这里假设是商品图片的容器\r\n            web_element_parent = xbot_visual.web.element.get_element(\r\n                browser=web_page, \r\n                select_type=\"xpath_selector\", \r\n                selector=None, \r\n                css_selector=\"\", \r\n                xpath_selector=\"//*[@class=\\\"partial-detail-wrapper\\\"]/div[1]\", \r\n                is_related_parent=False, \r\n                parent=None, \r\n                timeout=\"20\", \r\n                _block=(\"main\", 14, \"获取元素对象(web)\")\r\n            )\r\n            # 获取商品图片的容器中所有图片元素\r\n            web_element_list = xbot_visual.web.element.get_associated_elements(\r\n                browser=web_page, \r\n                element=web_element_parent, \r\n                associated_kind=\"child\", \r\n                child_access_kind=\"all\", \r\n                child_index=\"0\", \r\n                sibling_direction=\"next\", \r\n                timeout=\"20\", \r\n                _block=(\"main\", 15, \"获取关联元素(web)\")\r\n            )\r\n            # 打印当前处理的商品ID\r\n            xbot_visual.programing.log(\r\n                type=\"info\", \r\n                text=id_item, \r\n                _block=(\"main\", 16, \"打印日志\")\r\n            )\r\n            # 循环下载图片元素指向的图片\r\n            for loop_index in xbot_visual.workflow.range_iterator(\r\n                start=\"0\", \r\n                stop=lambda: len(web_element_list)-1, \r\n                step=\"1\", \r\n                _block=(\"main\", 17, \"For次数循环\")\r\n            ):\r\n                # 获取单个图片元素\r\n                web_element = xbot_visual.web.element.get_associated_elements(\r\n                    browser=web_page, \r\n                    element=web_element_parent, \r\n                    associated_kind=\"child\", \r\n                    child_access_kind=\"index\", \r\n                    child_index=lambda: loop_index, \r\n                    sibling_direction=\"next\", \r\n                    timeout=\"20\", \r\n                    _block=(\"main\", 18, \"获取关联元素(web)\")\r\n                )\r\n                # 获取图片元素的src属性，即图片的URL\r\n                web_element_attribute = xbot_visual.web.element.get_details(\r\n                    browser=web_page, \r\n                    element=web_element, \r\n                    operation=\"other\", \r\n                    absolute_url=False, \r\n                    attribute_name=\"src\", \r\n                    relative_to=\"screen\", \r\n                    to96dpi=True, \r\n                    timeout=\"20\", \r\n                    _block=(\"main\", 19, \"获取元素信息(web)\")\r\n                )\r\n                # 打印图片索引和URL\r\n                xbot_visual.programing.log(\r\n                    type=\"info\", \r\n                    text=loop_index, \r\n                    _block=(\"main\", 20, \"打印日志\")\r\n                )\r\n                xbot_visual.programing.log(\r\n```python\r\n                    type=\"info\", \r\n                    text=web_element_attribute, \r\n                    _block=(\"main\", 21, \"打印日志\")\r\n                )\r\n                # 下载图片到本地指定文件夹\r\n                download_file_name2 = xbot_visual.web.element.download(\r\n                    browser=web_page, \r\n                    scene=\"Url\", \r\n                    download_button=None, \r\n                    download_url=web_element_attribute, \r\n                    file_folder=temp_id_folder, \r\n                    use_custom_filename=False, \r\n                    file_name=\"\", \r\n                    wait_complete=True, \r\n                    wait_complete_timeout=\"300\", \r\n                    simulate=False, \r\n                    clipboard_input=False, \r\n                    input_type=\"automatic\", \r\n                    wait_dialog_appear_timeout=\"20\", \r\n                    force_ime_ENG=False, \r\n                    send_key_delay=\"50\", \r\n                    focus_timeout=\"1000\", \r\n                    _block=(\"main\", 22, \"下载文件\")\r\n                )\r\n            # 结束图片下载的循环\r\n            #endloop\r\n            # 暂停一定的时间后继续执行，模拟人的操作\r\n            xbot_visual.programing.sleep(\r\n                random_number=False, \r\n                seconds=\"1\", \r\n                start_number=\"1\", \r\n                stop_number=\"5\", \r\n                _block=(\"main\", 24, \"等待\")\r\n            )\r\n            # 关闭当前打开的浏览器页面\r\n            xbot_visual.web.browser.close(\r\n                operation=\"close_specified\", \r\n                browser=web_page, \r\n                web_type=\"cef\", \r\n                task_kill=False, \r\n                _block=(\"main\", 25, \"关闭网页\")\r\n            )\r\n        # 结束对商品ID列表的循环\r\n        #endloop\r\n        \r\n        # 以下是另一个独立的部分，看起来是为了再次执行一些操作，但是没有足够的上下文来确定它和上面代码的关系\r\n        # 弹出输入对话框，提示用户输入抖音店铺的商品ID\r\n        input_dialog = xbot_visual.dialog.show_input_dialog(\r\n            title=\"请输入抖店的商品ID\",  # 对话框标题\r\n            label=None,  # 标签为空\r\n            type=\"multiInput\",  # 输入类型为多行输入\r\n            value=None,  # 默认值为空\r\n            storage_key=\"17801cbf-9ba9-4b3c-86e8-de7a24641e2f\",  # 存储键值\r\n            _block=(\"main\", 1, \"打开输入对话框\")  # 日志记录块信息\r\n        )\r\n        # 使用正则表达式切分输入的商品ID\r\n        splited_list = re.split(r'\\r\\n|\\r|\\n', input_dialog.value)\r\n        \r\n        # 以下代码看起来是重复的，可能是为了处理不同的商品ID或是从另一个地方复制粘贴而未删除的\r\n        # 因为它和上面的代码几乎完全相同\r\n        \r\n        # ...\r\n        # 此处省略了重复的代码部分\r\n        # ...\r\n        \r\n        # 调用xbot_visual.process.run来运行OCR识别流程\r\n        OCR识别结果 = xbot_visual.process.run(\r\n            process=\"xbot_extensions.activity_179ea575.process1\",  # 指定要运行的流程\r\n            package=__name__,  # 当前包名\r\n            inputs={  # 输入参数\r\n                \"图片路径或图片url\": \"D:\\\\Desktop\\\\jjtwbnYD_m_a65cc55b0a5c730e7dd121a970ff63a7_sx_431434_www790-1147~tplv-5mmsx3fupr-resize_790_1147.jpeg\",\r\n                \"输出完整结果\": False,\r\n                \"文字检测框过滤的阈值\": lambda: 0.1,\r\n                \"文字检测框的大小\": lambda: 200,\r\n            },\r\n            outputs=[  # 输出参数列表\r\n                \"OCR识别结果\",\r\n            ],\r\n            _block=(\"main\", 27, \"影刀离线OCR\")  # 日志记录块信息\r\n        )\r\n        # 打印OCR识别结果\r\n        xbot_visual.programing.log(\r\n            type=\"info\", \r\n            text=OCR识别结果, \r\n            _block=(\"main\", 28, \"打印日志\")\r\n        )\r\nfinally:\r\n        # This block is executed no matter what, even if an error occurs in the try block.\r\n        # Currently, it doesn't contain any code, but this would be where you'd put cleanup\r\n        # code or logging that should happen after the rest of the script runs.\r\n        pass\r\n\r\n# This would be the end of the script. If there's more code that you haven't provided,\r\n# it would go here. The script seems to be designed to be part of a larger application\r\n# and likely relies on additional context and modules provided by that application.\r\nprint(\"我恁爹\")"
        }
      },
      "outputs": {}
    }
  ],
  "parameters": []
}